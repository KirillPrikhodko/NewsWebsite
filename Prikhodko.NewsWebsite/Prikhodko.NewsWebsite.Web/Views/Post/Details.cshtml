@using Microsoft.Ajax.Utilities
@using Newtonsoft.Json
@model Prikhodko.NewsWebsite.Web.Models.PostViewModel

<title>@Model.Title</title>


<div class="container">
    <div class="well">
        <div class="media">
            <div class="media-body">
                <h1 class="media-heading">@Model.Title</h1>
                <div><a class="text-right" href="/users/details/@ViewBag.Author.Id"> @Localization.Author: @ViewBag.Author.ApplicationIdentityUser.UserName</a></div>
                <h4>@Model.Description</h4>
                <h4>
                    @Localization.Category:
                    @Html.DisplayFor(model => model.Category)
                </h4>
                <p>
                    <div class="panel panel-default" id="content">
                    </div>
                </p>
                <ul class="list-inline list-unstyled">
                    <li><span><i class="glyphicon glyphicon-calendar"></i>@Model.Created</span></li>
                    <li>|</li>
                    <span><i class="glyphicon glyphicon-comment"></i> @Model.Comments.Count @Localization.Comments</span>
                    <li>|</li>
                    <li>
                        <div class="content-rate">
                        </div>
                    </li>
                    <li>|</li>
                    <li>
                        @if (Model.AvgRate != null)
                        {
                            <h5>@Localization.AvgRate: @Model.AvgRate</h5>
                        }
                        else
                        {
                            <h5>@Localization.NoRatesSoFar</h5>
                        }
                    </li>
                    <li>|</li>
                    <li>
                        @foreach (var tag in Model.Tags)
                        {
                            <a href="/Search/Tag?tagText=@HttpUtility.UrlEncode(tag)"> <span><i class="glyphicon glyphicon-tag"></i></span>@tag</a>;
                        }
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="container">
    @if (User.Identity.IsAuthenticated && !User.IsInRole("Blocked"))
    {
        <div class="form-horizontal" id="commentForm">
            <div class="form-group">
                <div class="col-md-12">
                    <textarea id="comment_input" class="form-control" name="addComment" rows="5"></textarea>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-12">
                    <button class="btn btn-success btn-circle text-uppercase" type="submit" id="sendcomment"><span class="glyphicon glyphicon-send"></span> @Localization.Send</button>
                </div>
            </div>
        </div>
    }
    <div id="comments">
    </div>
</div>

<div id="comment_template" class="media-body" style="display: none">
    <div class="well well-lg">
        <a class="media-heading text-uppercase reviews" id="authorname_template" href=#></a>
        <p id="commentcontent_template" class="media-comment">
        </p>
        <button class="btn btn-success btn-circle text-uppercase upvote_button" id="upvote_template"><span class="glyphicon glyphicon-plus"></span></button>
        <span id="currentrating_template" style="font-weight: bold"></span>
        <button class="btn btn-danger btn-circle text-uppercase downvote_button" id="downvote_template"><span class="glyphicon glyphicon-minus"></span></button>
        <button class="btn btn-danger btn-circle text-uppercase deletecomment_button" id="deletecomment_template" style="display: none">@Localization.Delete</button>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/rater.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <script src="~/signalr/hubs"></script>

    <script>
        $(document).ready(function () {
            @foreach (var comment in Model.Comments)
            {
                @:$('#comments').append(formComment('@comment.AuthorName', '@comment.AuthorId', '@comment.Content', '@comment.Rating', '@comment.Id'));
            }
        });
    </script>

    <script>
        $(function () {

            var comments_hub = $.connection.commentsHub;

            comments_hub.client.addNewComment = function (username, userid, content, rating, commentid) {
                // Add the comment to the page.
                $('#comments').append(formComment(username, userid, content, rating, commentid));
            };

            comments_hub.client.changeRating = function (requiredcommentid, shouldIncrease) {
                var currentrating = document.getElementById("currentrating" + requiredcommentid).innerHTML;
                if (shouldIncrease) {
                    currentrating++;
                } else {
                    currentrating--;
                }
                document.getElementById("currentrating" + requiredcommentid).innerHTML = currentrating;
            };

            comments_hub.client.deleteComment = function (id) {
                var commentid = "comment" + id;
                $('#' + commentid).remove();
            }

            $('#comment_input').focus();

            $.connection.hub.start().done(function () {
                $('#sendcomment').click(function () {
                    var commentcontent = $('#comment_input').val();
                    if (commentcontent) {
                        comments_hub.server.send($('#comment_input').val(), @Model.Id);
                    }
                    $('#comment_input').val('').focus();
                });
                $('.upvote_button').on("click", function(e) {
                    e.preventDefault();
                    comments_hub.server.addVote(true, this.id);
                    var searchid = this.id.replace("upvote", "");
                    $('#comment' + searchid).find('#upvote' + searchid).prop("disabled", true);
                    $('#comment' + searchid).find('#downvote' + searchid).prop("disabled", true);
                    //$('#comment' + searchid).find('#upvote' + searchid).prop("style", "background: green");
                })
                $('.downvote_button').on("click", function(e) {
                    e.preventDefault();
                    comments_hub.server.addVote(false, this.id);
                    var searchid = this.id.replace("downvote", "");
                    $('#comment' + searchid).find('#upvote' + searchid).prop("disabled", true);
                    $('#comment' + searchid).find('#downvote' + searchid).prop("disabled", true);
                    //$('#comment' + searchid).find('#downvote' + searchid).prop("style", "background: red");
                })
                $('.deletecomment_button').on("click", function () {
                    comments_hub.server.deleteComment(this.id)
                })
            });
        });

        function formComment(username, userid, content, rating, commentid) {
            var newcommentid = "comment" + commentid;
            var comment = $('#comment_template').clone(true).prop("id", newcommentid);
            comment.css("display", "inline");
        @if (!Context.User.Identity.IsAuthenticated)
        {
            @:$(comment).find('#upvote_template').prop("disabled", true);
            @:$(comment).find('#downvote_template').prop("disabled", true);
        }
            $(comment).find('#authorname_template').append(username);
            $(comment).find('#authorname_template').prop("href", "/users/details/" + userid);
            $(comment).find('#authorname_template').prop("id", "authorname" + commentid);

            $(comment).find('#commentcontent_template').append("<span>" + content + "</span>");
            $(comment).find('#commentcontent_template').prop("id", "commentcontent" + commentid);

            $(comment).find('#upvote_template').prop("id", "upvote" + commentid);

            $(comment).find('#currentrating_template').append(rating);
            $(comment).find('#currentrating_template').prop("id", "currentrating" + commentid);

            $(comment).find('#downvote_template').prop("id", "downvote" + commentid);


            @if(ViewBag.CurrentUser != null)
            {
                foreach (var commentRate in ViewBag.CurrentUser.CommentRates)
                {
                    @:var commentbuttonid = @commentRate.CommentId;
                    @:$(comment).find('#upvote' + commentbuttonid).prop("disabled", true);
                    @:$(comment).find('#downvote' + commentbuttonid).prop("disabled", true);
                    if (commentRate.Value)
                     {
                        @:$(comment).find('#upvote' + commentbuttonid).prop("style", "background: green");
                     }
                     else
                     {
                        @:$(comment).find('#downvote' + commentbuttonid).prop("style", "background: red");
                     }
                }
            }

            @if (Context.User.IsInRole("Admin"))
            {
                @:$(comment).find('#deletecomment_template').prop("style", "display: inline");
                @:$(comment).find('#deletecomment_template').prop("id", "deletecomment" + commentid);
            }

            return comment;
        }
    </script>

    <script>
        $('#content').append(marked(`@Html.Raw(Model.Content)`));
    </script>

    <script>
        if ('@Context.User.Identity.IsAuthenticated' === 'True') {
            var rate_value = '@Model.CurrentUserRateValue';
            var options = {
                max_value: 5,
                initial_value: rate_value.replace(",", "."),
                readonly: ('@Model.RatedByCurrentUser' === 'True' || '@Context.User.IsInRole("Blocked")' === 'True'),
                step_size: 0.5
            }

            $(".content-rate").rate(options);
            $(".content-rate").on("change",
                function (ev, data) {
                    options = {
                        max_value: 5,
                        initial_value: 0,
                        readonly: true,
                        step_size: 0.5
                    }
                    $(".content-rate").rate("destroy");
                    $(".content-rate").rate(options);

                    $.ajax({
                        url: "/Post/AddRate",
                        data: { rate: data.to, postId: @Model.Id }
                    });
                });
        }
    </script>
}