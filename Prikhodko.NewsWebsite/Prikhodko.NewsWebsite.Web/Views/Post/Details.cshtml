@using Microsoft.Ajax.Utilities
@using Newtonsoft.Json
@model Prikhodko.NewsWebsite.Web.Models.PostViewModel

<div class="row container">
    <div class="col-md-10">
        <h1>@Model.Title</h1>

        <div class="container">

            <div class="col-md-8">
                <h4>@Model.Description</h4>
            </div>

            <div class="col-md-2">
                Category:
                @Html.DisplayFor(model => model.Category)
            </div>
        </div>

        <div class="panel panel-default" id="content">
        </div>

        <div class="container">
            <div class="col-md-4">
                @foreach (var tag in Model.Tags)
                {
                    <a href="#">@tag</a>;
                }
            </div>
            <div class="col-md-4">
                @{
                    if (@Model.RatedByCurrentUser)
                    {
                        <div class="col-md-4">Your rate:</div>
                    }
                }
                <div class="col-md-1">
                    <div class="content-rate">
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                By:
                @Html.ActionLink((string)ViewBag.Author.ApplicationIdentityUser.UserName, "Details", "Account")
            </div>
            <div class="col-md-10">
                <div class="col-md-5"></div>
                @if (!double.IsNaN(Model.AvgRate))
                {
                    <div class="col-md-5">Average rate: @Model.AvgRate</div>
                }
                else
                {
                    <div class="col-md-5">No rates so far</div>
                }
            </div>
        </div>

    </div>
    <div class="col-md-2">
        @Html.Action("GetUserBar", "Users")
    </div>
</div>

<div class="container">
    @if(@User.Identity.IsAuthenticated)
    {
        <div class="col-md-10">
            <input type="text" id="comment_input" class="col-md-10"/>
            <input type="button" id="sendcomment" value="Send"/>
        </div>
    }
    <div id="comments" class="col-md-10">
    </div>
</div>

<div id="comment_template" class="comment-css" style="display: none;">
    <div class="row container-fluid">
        <div class="col-md-11">
            <div>
                <a id="authorname_template" href=#></a>
            </div>
            <div id="commentcontent_template">

            </div>
        </div>
        <div class="col=md-1">
            <div>
                <button id="upvote_template" class="upvote_button">+</button>
                <span id="currentrating_template" style="font-weight: bold"></span>
                <button id="downvote_template" class="downvote_button">-</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/rater.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.0/showdown.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <script src="~/signalr/hubs"></script>
    
    <script>
        $(document).ready(function () {
            @foreach (var comment in Model.Comments)
            {
                @:$('#comments').append(formComment('@comment.AuthorName', '@comment.AuthorId', '@comment.Content', '@comment.Rating', '@comment.Id'));
            }
        });
    </script>

    <script>
        $(function () {

            var comments_hub = $.connection.commentsHub;

            comments_hub.client.addNewComment = function (username, userid, content, rating, commentid) {
                // Add the comment to the page.
                $('#comments').append(formComment(username, userid, content, rating, commentid));
            };

            comments_hub.client.changeRating = function (requiredcommentid, shouldIncrease) {
                var currentrating = document.getElementById("currentrating" + requiredcommentid).innerHTML;
                if (shouldIncrease) {
                    currentrating++;
                } else {
                    currentrating--;
                }
                document.getElementById("currentrating" + requiredcommentid).innerHTML = currentrating;
            };

            $('#comment_input').focus();

            $.connection.hub.start().done(function () {
                $('#sendcomment').click(function () {
                    comments_hub.server.send($('#comment_input').val(), @Model.Id);
                    $('#comment_input').val('').focus();
                });
                $('.upvote_button').on("click", function(e) {
                    e.preventDefault();
                    comments_hub.server.addVote(true, this.id);
                    var searchid = this.id.replace("upvote", "");
                    $('#comment' + searchid).find('#upvote' + searchid).prop("disabled", true);
                    $('#comment' + searchid).find('#downvote' + searchid).prop("disabled", true);
                    $('#comment' + searchid).find('#upvote' + searchid).prop("style", "background: green");
                })
                $('.downvote_button').on("click", function(e) {
                    e.preventDefault();
                    comments_hub.server.addVote(false, this.id);
                    var searchid = this.id.replace("downvote", "");
                    $('#comment' + searchid).find('#upvote' + searchid).prop("disabled", true);
                    $('#comment' + searchid).find('#downvote' + searchid).prop("disabled", true);
                    $('#comment' + searchid).find('#downvote' + searchid).prop("style", "background: red");
                })
            });
        });

        function formComment(username, userid, content, rating, commentid) {
            var newcommentid = "comment" + commentid;
            var comment = $('#comment_template').clone(true).prop("id", newcommentid);
            comment.css("display", "block");

            $(comment).find('#authorname_template').append(username);
            $(comment).find('#authorname_template').prop("id", "authorname" + commentid);

            $(comment).find('#commentcontent_template').append("<span>" + content + "</span>");
            $(comment).find('#commentcontent_template').prop("id", "commentcontent" + commentid);

            $(comment).find('#upvote_template').prop("id", "upvote" + commentid);

            $(comment).find('#currentrating_template').append(rating);
            $(comment).find('#currentrating_template').prop("id", "currentrating" + commentid);

            $(comment).find('#downvote_template').prop("id", "downvote" + commentid);


            @if(ViewBag.CurrentUser == null) //if currentuser is not in database, he is not authenticated and should not be able to vote for comments
            {
                    @:$(comment).find('#upvote_template').prop("disabled", true);
                    @:$(comment).find('#downvote_template').prop("disabled", true);
            }
            else
            {
                foreach (var commentRate in ViewBag.CurrentUser.CommentRates)
                {
                    @:var commentbuttonid = @commentRate.CommentId;
                    @:$(comment).find('#upvote' + commentbuttonid).prop("disabled", true);
                    @:$(comment).find('#downvote' + commentbuttonid).prop("disabled", true);
                    if (commentRate.Value)
                     {
                        @:$(comment).find('#upvote' + commentbuttonid).prop("style", "background: green");
                     }
                     else
                     {
                        @:$(comment).find('#downvote' + commentbuttonid).prop("style", "background: red");
                     }
                }
            }

            var authorNameElement = $('#authorname').append(false);

            return comment;
        }
    </script>

    <script>
        var converter = new showdown.Converter(),
            text      = "@Model.Content",
            html = converter.makeHtml(text);
        $('#content').append(html);
    </script>

    <script>
        if ('@ViewBag.UserAuthenticated' === 'True') {
            var rate_value = '@Model.CurrentUserRateValue';
            var options = {
                max_value: 5,
                initial_value: rate_value.replace(",", "."),
                readonly: ('@Model.RatedByCurrentUser' === 'True'), //TODO: this is very unoptimized but js compares C# booleans as strings so I do not know the way around
                step_size: 0.5
            }

            $(".content-rate").rate(options);
            $(".content-rate").on("change",
                function (ev, data) {
                    options = {
                        max_value: 5,
                        initial_value: 0,
                        readonly: true,
                        step_size: 0.5
                    }
                    $(".content-rate").rate("destroy");
                    $(".content-rate").rate(options);

                    $.ajax({
                        url: "/Post/AddRate",
                        data: { rate: data.to, postId: @Model.Id }
                    });
                });
        }
    </script>
}